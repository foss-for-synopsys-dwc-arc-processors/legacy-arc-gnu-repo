@c Copyright 2000, 2001, 2005 Free Software Foundation, Inc.
@c This is part of the GAS manual.
@c For copying conditions, see the file as.texinfo.

@ifset GENERIC
@page
@node ARC-Dependent
@chapter ARC Dependent Features
@end ifset

@ifclear GENERIC
@node Machine Dependencies
@chapter ARC Dependent Features
@end ifclear

@set ARC_DEFAULT 4

@cindex ARC support
@menu
* ARC Options::              Options
* ARC Syntax::               Syntax
* ARC Floating Point::       Floating Point
* ARC Directives::           ARC Machine Directives
* ARC Opcodes::              Opcodes
@end menu


@node ARC Options
@section Options
@cindex ARC options (none)
@cindex options for ARC (none)

@table @code

@cindex @code{-A[4|5|6|7|RC600|RC700]} command line option, ARC
@item -A[4|5|6|7|RC600|RC700]
This option selects the ARC processor.  The option
@code{-A@value{ARC_DEFAULT}}, is the default.

@table @code

@cindex @code{A4} A4, ARC
@item A4
ARCtangent-A4 Processor

@cindex @code{A5} A5, ARC
@item A5
ARCompact A5 Processor

@cindex @code{ARC600} ARC600, ARC
@item ARC600
ARCompact ARC 600 Processor

@cindex @code{ARC700} ARC700, ARC
@item ARC700
ARCompact ARC 700 Processor

@end table

Note: the @code{.option} or the @code{.cpu} directive can to be used
to select an ARC processor type from within assembly code.  The command
line option overrides the @code{.option} directive.

@cindex @code{-muser-mode-only} command line option, ARC
@item -muser-mode-only
This option specifies that usage of instructions that are forbidden
in user mode should be flagged as errors.

@cindex @code{-mld-extension-reg-mask} command line option, ARC
@item -mld-extension-reg-mask
This option sets the set of extension registers that can be loaded
with an ld or ex instruction.  By default, any such loads are rejected,
but loads which ignore their result are allowed.
Extension registers are prepresented by the bit with the register number
minus 32, i.e. r32 is represented by bit 0.  ignored results ('0' as
destination) are represented by bit 30.

@cindex @code{-EB} command line option, ARC
@item -EB
This option specifies that the output generated by the assembler
should be marked as being encoded for a big-endian processor.

@cindex @code{-EL} command line option, ARC
@item -EL
This option specifies that the output generated by the assembler
should be marked as being encoded for a little-endian processor - this
is the default.

@cindex @code{-mbarrel_shifter} command line option, ARC
@item -mbarrel_shifter
Option -mbarrel_shifter enables support for the barrel shifter
extension instructions.

@cindex @code{-mnorm} command line option, ARC
@item -mnorm
Option -mnorm enables support for the normalize extension
instructions.

@cindex @code{-mswap} command line option, ARC
@item -mswap
Option -mswap enables support for the swap extension instruction.

@cindex @code{-mmin_max} command line option, ARC
@item -mmin_max
Option -mmin_max enables support for the @code{MIN} and @code{MAX}
extension instructions.

@cindex @code{-mEA} command line option, ARC
@item -mEA
Option -mea enables support for the extended arithmetic extension
instructions, registers and condition codes.

@cindex @code{-mmpy} command line option, ARC
@item -mmpy
Option -mmpy enables support for the general-purpose multiply
extension available with the ARC 700 and later processors.

@cindex @code{-mmul64} command line option, ARC
@item -mmul64
Option -mmul64 enables support for the 32-bit multiply extension
instructions and registers.

@end table


@node ARC Syntax
@section Syntax
@menu
* ARC-Chars::                Special Characters
* ARC-Regs::                 Register Names
@end menu

@node ARC-Chars
@subsection Special Characters

@cindex ARC special characters
@cindex special characters, ARC

@itemize

@item @code{%}

Register operands may be prefixed with @code{%} to specify it
as a register although by default it is anyway taken as a register.


@item @code{@@}

Prefixing an operand with @code{@@} specifies the operand to be a
symbol and not a register.  This is how the assembler dis-ambiguates
the use of an ARC register name as a symbol.

@end itemize

In the example below, the value of the symbol (label) @var{r0} is
moved into the register @var{r0}.  The @code{@@} prefix overrides the
default behaviour of GAS to take @var{r0} as a register.

@smallexample
r0:
        mov r0,@@r0
        mov %r0,@@r0
@end smallexample

In the example below, the value of the symbol (label) @var{foo} is
moved into the register @var{foo}.  Although @var{foo} is not
prefixed with @code{@@} in the first instruction, since @var{foo} is
not an ARC register, GAS takes the operand to be a symbol and not a
register.

@smallexample
foo:
        mov r0,foo
        mov r0,@@foo
@end smallexample

@node ARC-Regs
@subsection Register Names

@cindex ARC register names
@cindex register names, ARC
ARC register operands may be prefixed with @code{%%}.

@node ARC Floating Point
@section Floating Point

@cindex floating point, ARC (@sc{ieee})
@cindex ARC floating point (@sc{ieee})
The ARC core does not currently have hardware floating point
support.  Software floating point support is provided by @code{GCC}
and uses @sc{ieee} floating-point numbers.

@node ARC Directives
@section ARC Machine Directives

@cindex machine directives, ARC
@cindex ARC machine directives
The ARC version of @code{@value{AS}} supports the following additional
machine directives:

@table @code

@cindex @code{2byte} directive, ARC
@item .2byte @var{expressions}
*TODO*

@cindex @code{3byte} directive, ARC
@item .3byte @var{expressions}
*TODO*

@cindex @code{4byte} directive, ARC
@item .4byte @var{expressions}
*TODO*

@cindex @code{extAuxRegister} directive, ARC
@item .extAuxRegister @var{name},@var{address},@var{mode}
The ARC cores have extensible auxiliary register space.  The
auxiliary registers can be defined in the assembler source code by
using this directive.  The first parameter is the @var{name} of the
new auxiallry register.  The second parameter is the @var{address} of
the register in the auxiliary register memory map for the variant of
the ARC.  The third parameter specifies the @var{mode} in which the
register can be operated on and it can be one of: 

@table @code
@item r          (readonly) 
@item w          (write only)
@item r|w        (read or write)
@end table

For example:

@smallexample
  .extAuxRegister mulhi,0x12,w
@end smallexample

This specifies an extension auxiliary register called @emph{mulhi}
which is at address 0x12 in the memory space and which is only
writable.

@cindex @code{extCondCode} directive, ARC
@item .extCondCode @var{suffix},@var{value}
The condition codes on the ARC cores are extensible and can be
specified by means of this assembler directive.  They are specified
by the suffix and the value for the condition code.  They can be used to
specify extra condition codes with any values.  For example:

@smallexample
  .extCondCode is_busy,0x14
  
   add.is_busy  r1,r2,r3
   bis_busy     _main
@end smallexample

@cindex @code{extCoreRegister} directive, ARC
@item .extCoreRegister @var{name},@var{regnum},@var{mode},@var{shortcut}
Specifies an extension core register @var{name} for the application.
This allows a register @var{name} with a valid @var{regnum} between 0
and 60, with the following as valid values for @var{mode} 

@table @samp
@item @emph{r}   (readonly) 
@item @emph{w}   (write only)
@item @emph{r|w} (read or write)
@end table


The other parameter gives a description of the register having a
@var{shortcut} in the pipeline.  The valid values are:

@table @code
@item can_shortcut
@item cannot_shortcut
@end table

For example:

@smallexample
  .extCoreRegister mlo,57,r,can_shortcut
@end smallexample

This defines an extension core register mlo with the value 57 which
can shortcut the pipeline.

@cindex @code{extInstruction} directive, ARC
@item .extInstruction @var{name},@var{opcode},@var{subopcode},@var{suffixclass},@var{syntaxclass}
The ARC cores allows the user to specify extension instructions.
The extension instructions are not macros.  The assembler creates
encodings for use of these instructions according to the specification
by the user.  The parameters are:

@table @bullet
@item @var{name}
Name of the extension instruction.  In case of the ARCompact, if the
instruction name is suffixed with _s it indicates a 16-bit extension
instruction.

@item @var{opcode}
Opcode to be used. (Bits 27:31 in the encoding).  Valid values
0x10-0x1f or 0x03.
In case of the ARCompact, for the 32-bit extension instructions valid
values range from 0x04-0x07 (inclusive) and for 16-bit instructions
valid values range from 0x08-0x0B (inclusive).

@item @var{subopcode}
Subopcode to be used.  Valid values are from 0x09-0x3f.  However the
correct value also depends on @var{syntaxclass}

@item @var{suffixclass}
Determines the kinds of suffixes to be allowed.  Valid values are
@code{SUFFIX_NONE}, @code{SUFFIX_COND}, 
@code{SUFFIX_FLAG} which indicates the absence or presence of
conditional suffixes and flag setting by the extension instruction.
It is also possible to specify that an instruction sets the flags and
is conditional by using @code{SUFFIX_CODE} | @code{SUFFIX_FLAG}.

@item @var{syntaxclass}
Determines the syntax class for the instruction.  It can have the
following values:

@table @code
@item @code{SYNTAX_NOP}:
2 Operand Instruction, with no operands.  Available only for ARCompact.
@item @code{SYNTAX_1OP}:
2 Operand Instruction, with 1 source operand.  Available only for ARCompact.
@item @code{SYNTAX_2OP}:
2 Operand Instruction, with 1 source operand and one destination.
@item @code{SYNTAX_3OP}:
3 Operand Instruction, with 2 source operands and one destination.
@end table

In addition there could be modifiers for the syntax class as described
below:

@itemize @minus
Syntax Class Modifiers are:

@item @code{OP1_MUST_BE_IMM}:
Modifies syntax class SYNTAX_3OP, specifying that the first operand
of a three-operand instruction must be an immediate (i.e. the result
is discarded).  OP1_MUST_BE_IMM is used by bitwise ORing it with
SYNTAX_3OP as given in the example below.  This could usually be used
to set the flags using specific instructions and not retain results. 

@item @code{OP1_IMM_IMPLIED}:
Modifies syntax class SYNTAX_20P, it specifies that there is an
implied immediate destination operand which does not appear in the
syntax.  For example, if the source code contains an instruction like:

@item @code{OP1_DEST_IGNORED}:
Used with OP1_MUST_BE_IMM and OP1_IMM_IMPLIED when the instruction
ignores the destination operand.  It allows the assembler to choose a
more efficient encoding of the instruction.  GAS currently ignores this
syntax class modifier.

@smallexample
inst r1,r2 
@end smallexample

it really means that the first argument is an implied immediate (that
is, the result is discarded).  This is the same as though the source
code were: inst 0,r1,r2.  You use OP1_IMM_IMPLIED by bitwise ORing it
with SYNTAX_20P.

@end itemize 
@end table

For example, defining 64-bit multiplier with immediate operands:

@smallexample
.extInstruction mul64,0x14,0x0,SUFFIX_COND | SUFFIX_FLAG ,
                SYNTAX_3OP|OP1_MUST_BE_IMM
@end smallexample

The above specifies an extension instruction called mul64 which has 3 operands,
sets the flags, can be used with a condition code, for which the
first operand is an immediate.  (Equivalent to discarding the result 
of the operation).

@smallexample
 .extInstruction mul64,0x14,0x00,SUFFIX_COND, SYNTAX_2OP|OP1_IMM_IMPLIED
@end smallexample

This describes a 2 operand instruction with an implicit first
immediate operand.  The result of this operation would be discarded.

@cindex @code{half} directive, ARC
@item .half @var{expressions}
*TODO*

@cindex @code{long} directive, ARC
@item .long @var{expressions}
*TODO*

@cindex @code{option} directive, ARC
@item .option @var{A4|A5|A6|ARC600|A7|ARC700}
The @code{.option} directive must be followed by the ARC processor
type.

Note: the @code{.option} directive overrides the command line option;
a warning is emitted when the processor type is not consistent between
the two.

@cindex @code{cpu} directive, ARC
@item .cpu @var{A4|A5|A6|ARC600|A7|ARC700}
Same as the above @code{.option} directive.

@cindex @code{short} directive, ARC
@item .short @var{expressions}
*TODO*

@cindex @code{word} directive, ARC
@item .word @var{expressions}
*TODO*

@end table


@node ARC Opcodes
@section Opcodes

@cindex ARC opcodes
@cindex opcodes for ARC

For information on the ARCtangent-A4 instruction set, see
@cite{ARCtangent-A4 Programmers Reference Manual}, ARC International Ltd.

For information on the ARCompact A5 instruction set, see
@cite{ARCompact A5 Programmers Reference Manual}, ARC International Ltd.

For information on the ARCompact ARC600 instruction set, see
@cite{ARCompact ARC600 Programmers Reference Manual}, ARC
International Ltd.

For information on the ARCompact ARC700 instruction set, see
@cite{ARCompact ARC700 Programmers Reference Manual}, ARC
International Ltd.
